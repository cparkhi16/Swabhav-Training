sudo: required
language: generic

services:
  - docker

before_install:
  - docker build -t cparkhi16/react-test -f ./client/Dockerfile.dev ./client

script:
  - docker run -e CI=true cparkhi16/react-test npm test

after_success:
  - docker build -t cparkhi16/multi-client ./client
  - docker build -t cparkhi16/multi-nginx ./nginx
  - docker build -t cparkhi16/multi-server ./server
  - docker build -t cparkhi16/multi-worker ./worker
  # Log in to the docker CLI
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  # Take those images and push them to docker hub
  - docker push cparkhi16/multi-client
  - docker push cparkhi16/multi-nginx
  - docker push cparkhi16/multi-server
  - docker push cparkhi16/multi-worker

deploy:
  provider: elasticbeanstalk
  region: 'us-east-1'
  app: 'multi-docker'
  env: 'MultiDocker-env'
  bucket_name: 'elasticbeanstalk-us-east-1-923445559289'
  bucket_path: 'docker-multi'
  on:
    branch: main
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY 
# AWS_ACCESS_KEY and AWS_SECRET_KEY are stored in travis as an env variable  ( these creds are created by creating a user in AWS IAM giving all programatic access for EBS to it)

# $DOCKER_PASSWORD and $DOCKER_ID  will be stored in travis as an environment variable (encoded format)
# here we are just testing one client image in before_install section , but we can test multiple images within it by creating images in this section and testing it within script section.
# this multi container approach will first test and if we get sucess (i.e status code of our test command should not be other than zero) , then we can
# build new prod images within after_success section and push it to docker hub from where aws ebs will take images from and deploy it 
